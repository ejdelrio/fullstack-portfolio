<!DOCTYPE html>
<!-- saved from url=(0022)http://localhost:8080/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <link href="./Edwin J Del Rio_files/css" rel="stylesheet">
  <link rel="stylesheet" href="./Edwin J Del Rio_files/prism.min.css">
  <link href="./Edwin J Del Rio_files/css(1)" rel="stylesheet">
  
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edwin J Del Rio</title>
  <script src="./Edwin J Del Rio_files/platform.js" async="" defer="" gapi_processed="true"></script>
<link href="./Edwin J Del Rio_files/bundle-3b4d0d353dad2d3e6547.css" rel="stylesheet"><style type="text/css">:root #content > #right > .dose > .dosesingle,
:root #content > #center > .dose > .dosesingle
{display:none !important;}</style></head>

  <body>
    <main id="root"><section data-reactroot="" id="router"><section><section id="landing"><div></div><svg version="1.1" viewBox="0 0 1691 1407"><g id="packet"><path d="M1691,165.177C1691,73.952,1617.048,0,1525.823,0H165.177C73.952,0,0,73.952,0,165.177v1076.646   C0,1333.048,73.952,1407,165.177,1407h1360.646c91.225,0,165.177-73.952,165.177-165.177V165.177z M166.062,132h1361.057   c18.216,0,32.881,14.528,32.881,32.746v1.433L869.916,856.337c-8.417,8.417-18.208,9.675-23.318,9.675   c-5.11,0-14.934-1.258-23.353-9.675L133,166.085v-1.339C133,146.528,147.846,132,166.062,132z M1527.119,1275H166.062   c-18.216,0-33.062-15.084-33.062-33.301V352.961l596.826,596.816c31.198,31.197,72.684,48.376,116.803,48.376   c44.125-0.003,85.528-17.186,116.724-48.382L1560,353.054v888.645C1560,1259.916,1545.335,1275,1527.119,1275z"></path></g><g id="Layer_1"></g></svg><section><h1 class="fadeIn">Edwin Del Rio</h1><h2 class="fadeIn">Fullstack Javascript Developer</h2><div class="fadeIn"></div><a href="http://localhost:8080/#about" class="fadeIn pulse">â–¼</a></section></section><section id="content"><section id="navbar"><ul class=""><li><a href="http://localhost:8080/#landing">Home</a></li><li><a href="http://localhost:8080/#about">About</a></li><li><a href="http://localhost:8080/#skills2">Skills</a></li><li><a href="http://localhost:8080/#projects">Code</a></li><li><a href="http://localhost:8080/#foot">Contact</a></li></ul><div></div><div id="burger" class=""><div id="first"></div><div id="second"></div><div id="third"></div></div></section><section id="about" class="panel"><a id="about"></a><div><div class="hidden"><div><p>Front End Design</p></div></div><div class="hidden"><div><p>API Architecture</p></div></div><div class="hidden"><div><p>Responsive UI</p></div></div><div class="hidden"><div><p>Single Page Apps</p></div></div><div class="hidden"><div><p>MVC Architecture</p></div></div></div><section class="panel"><div class="me"><div></div></div><h4>-Fullstack Javascript Developer-</h4><p>Hello, thanks for visiting my page. My name is Edwin. I'm a fullstack web developer primarily based in the west coast. Some of my programming interests include machine learning, social media platforms and client to client interactions. I'm also building my design skills to create beautiful user interfaces.</p></section></section><section id="skills2"><h5 class="hidden">Skills</h5><div class="hidden-div"></div><ul><li class="hidden"><p>Front End</p><div></div><ul><li>CSS3/SCSS</li><li>React / Redux</li><li>HTML5</li><li>Handlebars</li></ul></li><li class="hidden"><p>Back End</p><div></div><ul><li>Node</li><li>Express</li><li>Debug</li><li>npm</li><li>Cors</li><li>Morgan</li></ul></li><li class="hidden"><p>Development</p><div></div><ul><li>ECMAScript ES6</li><li>MongoDB / Mongoose</li><li>AWS</li><li>PostgresSQL</li><li>Heroku</li><li>CRUD, MVC, TDD</li><li>Webpack</li><li>Babel</li></ul></li><li class="hidden"><p>Testing</p><div></div><ul><li>Mocha</li><li>Chai</li><li>Jest</li><li>Travis.io</li><li>Coveralls</li></ul></li></ul></section><section id="projects"><h5>Projects / Code Samples</h5><section><div class=""><p>Node.js</p><div><p>Using Node.js in combination with express, I'm able to construct RESTful APIs quickly and efficiently. APIs easily accomodate two factor authentication and custom middleware. Below is a sample of an endpoint that performs a complex database query. The query performs a radial search by distance, using longitude and latitude coordinates saved to the model.</p><pre class=" language-javascript"><code class=" language-javascript">profileRouter<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/userQuery/'</span><span class="token punctuation">,</span> bearerAuth<span class="token punctuation">,</span> profileFetch<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">'GET /api/userQuery/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> searches work<span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//the limit parameter dictates how many items we'll pull per query</span>
      <span class="token comment" spellcheck="true">//max represents max distance from the users location.</span>

      <span class="token keyword">let</span> <span class="token punctuation">{</span>maxDistance<span class="token punctuation">,</span> coords<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> type<span class="token punctuation">,</span> genres<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query

      <span class="token keyword">let</span> locationQuery <span class="token operator">=</span> <span class="token punctuation">{</span>
        location<span class="token punctuation">:</span> <span class="token punctuation">{</span>
          $near<span class="token punctuation">:</span> coords<span class="token punctuation">,</span>
          $maxDistance<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>maxDistance<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        type<span class="token punctuation">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>type
      <span class="token punctuation">}</span><span class="token punctuation">;</span>

      Profile<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>locationQuery<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>genres<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token keyword">let</span> genreHashMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> newResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        genres<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
          genreHashMap<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        result<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> val<span class="token punctuation">.</span>genre<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>genreHashMap<span class="token punctuation">[</span>val<span class="token punctuation">.</span>genre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              newResult<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>newResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre></div></div><div class="hidden"><p>React</p><div><p>React's one way data flow, complimented by Redux's state managment lends way to the development of incredibly performant applications. React's component architecture is akin to a digital playground. It's by far my favorite framework to work with. The code below displays a React reusable React component that take several props, one being an object constructor for a trie search tree. The tree is than build using an array of strings. Any text input is passed into the tree to search, the the results are rendered below.</p><pre class=" language-javascript"><code class=" language-javascript">
    <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name">AutoCompInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
      <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
          queryResults<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          textInput<span class="token punctuation">:</span> <span class="token string">''</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token punctuation">{</span>Tree<span class="token punctuation">,</span> library<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>genreLibrary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>genreLibrary<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span>library<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>genreLibrary<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">onChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> value<span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
        <span class="token keyword">let</span> queryResults <span class="token operator">=</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>genreLibrary<span class="token punctuation">.</span><span class="token function">searchWords</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> value<span class="token punctuation">,</span>
          queryResults
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>className<span class="token punctuation">}</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>input
              type<span class="token operator">=</span><span class="token string">'text'</span>
              name<span class="token operator">=</span><span class="token string">'textInput'</span>
              placeholder<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>placeholder<span class="token punctuation">}</span>
              onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">}</span>
              value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>textInput<span class="token punctuation">}</span>
              autoComplete<span class="token operator">=</span><span class="token string">'off'</span>
            <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
              <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>queryResults<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> ind<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">(</span>
                  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>ind<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
                    <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span>
                  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
                <span class="token punctuation">)</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">export</span> <span class="token keyword">default</span> AutoCompInput
    </code></pre></div></div><div class="hidden"><p>MongoDB</p><div><p>Using MongoDB with Mongoose, I'm able to rapidly construct and model to leverage data persistence. Models can hold references to many other models allowing for the creation of complex objects. The code snippet below represents a MongoDB Model for what may be considered a profile model.</p><pre class=" language-javascript"><code class=" language-javascript">
      <span class="token string">'use strict'</span><span class="token punctuation">;</span>


      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'dotenv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>#APP_NAME<span class="token punctuation">:</span> Profile Model<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span>

      <span class="token keyword">const</span> profileSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        userID<span class="token punctuation">:</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> unique<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        userName<span class="token punctuation">:</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> String<span class="token punctuation">,</span> unique<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        conversations<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span> ref<span class="token punctuation">:</span> <span class="token string">'convoNode'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        type<span class="token punctuation">:</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> String<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token string">'2d'</span><span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        notifications<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span> ref<span class="token punctuation">:</span> <span class="token string">'notification'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        albums<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span> ref<span class="token punctuation">:</span> <span class="token string">'album'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        photos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span> ref<span class="token punctuation">:</span> <span class="token string">'photo'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        videos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span> ref<span class="token punctuation">:</span> <span class="token string">'video'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        genres<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> String<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        bio<span class="token punctuation">:</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> String<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> Profile <span class="token operator">=</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'profile'</span><span class="token punctuation">,</span> profileSchema<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div><div class="hidden"><p>AWS</p><div><p>Amazon Web Services offers additional development tools for applications. One of the major features I leverage is the s3 storage. This allows photos, images and many other file types to be stored from the client without bloading precious data base space. The npm s3 module is used in conjution with the s3 cloud. Below is sample code for an s3 audio file upload.</p><pre class=" language-javascript"><code class=" language-javascript">
    WS<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setPromisesDependency</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bluebird'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AWS<span class="token punctuation">.</span>S3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> dataDir <span class="token operator">=</span> __dirname <span class="token operator">+</span> <span class="token string">'/../data-mp3s'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dest<span class="token punctuation">:</span> dataDir <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> trackRouter <span class="token operator">=</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> trackKey <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">s3uploadProm</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'called s3uploadProm'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        s3<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> s3data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'s3uploadProm error'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'s3datas'</span><span class="token punctuation">,</span> s3data<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>s3data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    trackRouter<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/album/:id/track'</span><span class="token punctuation">,</span> jsonParser<span class="token punctuation">,</span> bearerAuth<span class="token punctuation">,</span> profileFetch<span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">'soundFile'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">'POST: /api/album/:id/track'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>file<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">'file not found'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">'file not saved'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


      <span class="token keyword">let</span> ext <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>
        ACL<span class="token punctuation">:</span> <span class="token string">'public-read'</span><span class="token punctuation">,</span>
        Bucket<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>AWS_BUCKET<span class="token punctuation">,</span>
        Key<span class="token punctuation">:</span> req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename <span class="token operator">+</span> ext<span class="token punctuation">,</span>
        Body<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>

      Album<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>album <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> track <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Track</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        track<span class="token punctuation">.</span>albumID <span class="token operator">=</span> album<span class="token punctuation">.</span>_id<span class="token punctuation">;</span>
        track<span class="token punctuation">.</span>profileID <span class="token operator">=</span> req<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>_id<span class="token punctuation">;</span>
        album<span class="token punctuation">.</span>tracks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>track<span class="token punctuation">.</span>_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        album<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">s3uploadProm</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>s3data <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        trackKey <span class="token operator">=</span> s3data<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
        <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span>dataDir <span class="token operator">+</span> <span class="token string">'/*'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> trackData <span class="token operator">=</span> <span class="token punctuation">{</span>
          title<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
          url<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>url<span class="token punctuation">,</span>
          profileID<span class="token punctuation">:</span> req<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>_id<span class="token punctuation">,</span>
          albumID<span class="token punctuation">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
          awsKey<span class="token punctuation">:</span> trackKey<span class="token punctuation">,</span>
          awsURI<span class="token punctuation">:</span> s3data<span class="token punctuation">.</span>location
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Track<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>trackData<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>track <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'CREATED THE TRACK!'</span><span class="token punctuation">,</span> track<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </code></pre></div></div><div class="hidden"><p>Animation</p><section><p data-height="403" data-theme-id="0" data-slug-hash="gGzabL" data-default-tab="css,result" data-user="ejdelrio" data-embed-version="2" data-pen-title="gGzabL"><!-- react-text: 131 -->See the Pen <!-- /react-text --><a href="https://codepen.io/ejdelrio/pen/gGzabL/">gGzabL</a><!-- react-text: 133 --> by Edwin Del Rio (<!-- /react-text --><a href="https://codepen.io/ejdelrio">@ejdelrio</a><!-- react-text: 135 -->) on <!-- /react-text --><a href="https://codepen.io/">CodePen</a><!-- react-text: 137 -->.<!-- /react-text --></p><script async="" src="./Edwin J Del Rio_files/ei.js" style="
  width: 100%;
  height: 40vh;
  float: left;
  display: block;
"></script></section></div></section></section></section><footer id="foot"><h5>Contact</h5><div></div><ul><li><a href="https://www.facebook.com/edwin.delrio.96"><svg viewBox="88.428 12.828 107.543 207.085"><path d="M158.232 219.912v-94.461h31.707l4.747-36.813h-36.454V65.134c0-10.658 2.96-17.922 18.245-17.922l19.494-.009V14.278c-3.373-.447-14.944-1.449-28.406-1.449-28.106 0-47.348 17.155-47.348 48.661v27.149H88.428v36.813h31.788v94.461l38.016-.001z"></path></svg></a></li><li><a href="https://github.com/ejdelrio"><svg viewBox="0 0 256 249" preserveAspectRatio="xMinYMin meet"><g><path d="M127.505 0C57.095 0 0 57.085 0 127.505c0 56.336 36.534 104.13 87.196 120.99 6.372 1.18 8.712-2.766 8.712-6.134 0-3.04-.119-13.085-.173-23.739-35.473 7.713-42.958-15.044-42.958-15.044-5.8-14.738-14.157-18.656-14.157-18.656-11.568-7.914.872-7.752.872-7.752 12.804.9 19.546 13.14 19.546 13.14 11.372 19.493 29.828 13.857 37.104 10.6 1.144-8.242 4.449-13.866 8.095-17.05-28.32-3.225-58.092-14.158-58.092-63.014 0-13.92 4.981-25.295 13.138-34.224-1.324-3.212-5.688-16.18 1.235-33.743 0 0 10.707-3.427 35.073 13.07 10.17-2.826 21.078-4.242 31.914-4.29 10.836.048 21.752 1.464 31.942 4.29 24.337-16.497 35.029-13.07 35.029-13.07 6.94 17.563 2.574 30.531 1.25 33.743 8.175 8.929 13.122 20.303 13.122 34.224 0 48.972-29.828 59.756-58.22 62.912 4.573 3.957 8.648 11.717 8.648 23.612 0 17.06-.148 30.791-.148 34.991 0 3.393 2.295 7.369 8.759 6.117 50.634-16.879 87.122-64.656 87.122-120.973C255.009 57.085 197.922 0 127.505 0"></path><path d="M47.755 181.634c-.28.633-1.278.823-2.185.389-.925-.416-1.445-1.28-1.145-1.916.275-.652 1.273-.834 2.196-.396.927.415 1.455 1.287 1.134 1.923M54.027 187.23c-.608.564-1.797.302-2.604-.589-.834-.889-.99-2.077-.373-2.65.627-.563 1.78-.3 2.616.59.834.899.996 2.08.36 2.65M58.33 194.39c-.782.543-2.06.034-2.849-1.1-.781-1.133-.781-2.493.017-3.038.792-.545 2.05-.055 2.85 1.07.78 1.153.78 2.513-.019 3.069M65.606 202.683c-.699.77-2.187.564-3.277-.488-1.114-1.028-1.425-2.487-.724-3.258.707-.772 2.204-.555 3.302.488 1.107 1.026 1.445 2.496.7 3.258M75.01 205.483c-.307.998-1.741 1.452-3.185 1.028-1.442-.437-2.386-1.607-2.095-2.616.3-1.005 1.74-1.478 3.195-1.024 1.44.435 2.386 1.596 2.086 2.612M85.714 206.67c.036 1.052-1.189 1.924-2.705 1.943-1.525.033-2.758-.818-2.774-1.852 0-1.062 1.197-1.926 2.721-1.951 1.516-.03 2.758.815 2.758 1.86M96.228 206.267c.182 1.026-.872 2.08-2.377 2.36-1.48.27-2.85-.363-3.039-1.38-.184-1.052.89-2.105 2.367-2.378 1.508-.262 2.857.355 3.049 1.398"></path></g></svg></a></li><li><a href="https://linkedin.com/in/edwin-del-rio-b485b2b8/"><svg version="1.1" viewBox="0 0 512 512"><g></g><path d="M29.675 177.275l92.784-1.157v303.831l-92.784 1.178v-303.851z" fill="#000000"></path><path d="M200.141 177.275l88.658-1.126v38.646l0.021 10.947c26.255-25.744 53.32-45.2 96.563-45.2 51.016 0 100.362 21.381 100.362 91.034v208.435l-90 1.341v-159.232c0-35.103-8.796-57.733-50.719-57.733-36.935 0-52.398 6.615-52.398 55.214v160.399l-92.478 1.116v-303.841z" fill="#000000"></path><path d="M127.836 81.449c0 28.051-22.74 50.79-50.79 50.79s-50.791-22.739-50.791-50.791c0-28.051 22.739-50.791 50.791-50.791 28.051 0 50.791 22.739 50.791 50.791z" fill="#000000"></path></svg></a></li><li><svg version="1.1" viewBox="0 0 1691 1407"><g id="packet"><path d="M1691,165.177C1691,73.952,1617.048,0,1525.823,0H165.177C73.952,0,0,73.952,0,165.177v1076.646   C0,1333.048,73.952,1407,165.177,1407h1360.646c91.225,0,165.177-73.952,165.177-165.177V165.177z M166.062,132h1361.057   c18.216,0,32.881,14.528,32.881,32.746v1.433L869.916,856.337c-8.417,8.417-18.208,9.675-23.318,9.675   c-5.11,0-14.934-1.258-23.353-9.675L133,166.085v-1.339C133,146.528,147.846,132,166.062,132z M1527.119,1275H166.062   c-18.216,0-33.062-15.084-33.062-33.301V352.961l596.826,596.816c31.198,31.197,72.684,48.376,116.803,48.376   c44.125-0.003,85.528-17.186,116.724-48.382L1560,353.054v888.645C1560,1259.916,1545.335,1275,1527.119,1275z"></path></g><g id="Layer_1"></g></svg></li></ul></footer></section><section id="contact" class="message-hidden"><button>âœ–</button><form><input type="text" name="name" placeholder="Pleas Enter Your Name." value=""><input type="text" name="email" placeholder="Please Enter Your Email" value=""><input type="text" name="subject" placeholder="Please Enter a Subject" value=""><textarea name="content" type="text" placeholder="Write Message Here"></textarea><button type="submit">Send Message</button></form></section></section></main>

  <script type="text/javascript" src="./Edwin J Del Rio_files/bundle-3b4d0d353dad2d3e6547.js"></script>
  <script src="./Edwin J Del Rio_files/prism.min.js"></script>


</body><script>function inject(){function a(){function a(a){parent.postMessage({type:"blockedWindow",args:JSON.stringify(a)},l)}function b(a){var b=a[1];return null!=b&&["_blank","_parent","_self","_top"].indexOf(b)<0?b:null}function e(a,b){var c;for(c in a)try{void 0===b[c]&&(b[c]=a[c])}catch(d){}return b}var g=arguments,h=!0,j=null,k=null;if(null!=window.event&&(k=window.event.currentTarget),null==k){for(var m=g.callee;null!=m.arguments&&null!=m.arguments.callee.caller;)m=m.arguments.callee.caller;null!=m.arguments&&m.arguments.length>0&&null!=m.arguments[0].currentTarget&&(k=m.arguments[0].currentTarget)}null!=k&&(k instanceof Window||k===document||null!=k.URL&&null!=k.body||null!=k.nodeName&&("body"==k.nodeName.toLowerCase()||"#document"==k.nodeName.toLowerCase()))?(window.pbreason="Blocked a new window opened with URL: "+g[0]+" because it was triggered by the "+k.nodeName+" element",h=!1):h=!0;document.webkitFullscreenElement||document.mozFullscreenElement||document.fullscreenElement;if(((new Date).getTime()-d<1e3||isNaN(d)&&c())&&(window.pbreason="Blocked a new window opened with URL: "+g[0]+" because a full screen was just initiated while opening this url.",document.exitFullscreen?document.exitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitCancelFullScreen&&document.webkitCancelFullScreen(),h=!1),1==h){j=f.apply(this,g);var n=b(g);if(null!=n&&(i[n]=j),j!==window){var o=(new Date).getTime(),p=j.blur;j.blur=function(){(new Date).getTime()-o<1e3?(window.pbreason="Blocked a new window opened with URL: "+g[0]+" because a it was blured",j.close(),a(g)):p()}}}else{var q={href:g[0]};q.replace=function(a){q.href=a},j={close:function(){return!0},test:function(){return!0},blur:function(){return!0},focus:function(){return!0},showModelessDialog:function(){return!0},showModalDialog:function(){return!0},prompt:function(){return!0},confirm:function(){return!0},alert:function(){return!0},moveTo:function(){return!0},moveBy:function(){return!0},resizeTo:function(){return!0},resizeBy:function(){return!0},scrollBy:function(){return!0},scrollTo:function(){return!0},getSelection:function(){return!0},onunload:function(){return!0},print:function(){return!0},open:function(){return this},opener:window,closed:!1,innerHeight:480,innerWidth:640,name:g[1],location:q,document:{location:q}},e(window,j),j.window=j;var n=b(g);if(null!=n)try{i[n].close()}catch(r){}setTimeout(function(){var b;b=j.location instanceof Object?j.document.location instanceof Object?null!=q.href?q.href:g[0]:j.document.location:j.location,g[0]=b,a(g)},100)}return j}function b(a){d=a?(new Date).getTime():0/0}function c(){return document.fullScreenElement&&null!==document.fullScreenElement||null!=document.mozFullscreenElement||null!=document.webkitFullscreenElement}var d,e="originalOpenFunction",f=window.open,g=document.createElement,h=document.createEvent,i={},j=0,k=null,l=window.location!=window.parent.location?document.referrer:document.location;window[e]=window.open,window.open=function(){try{return a.apply(this,arguments)}catch(b){return null}},document.createElement=function(){var a=g.apply(document,arguments);if("a"==arguments[0]||"A"==arguments[0]){j=(new Date).getTime();var b=a.dispatchEvent;a.dispatchEvent=function(c){return null!=c.type&&"click"==(""+c.type).toLocaleLowerCase()?(window.pbreason="blocked due to an explicit dispatchEvent event with type 'click' on an 'a' tag",parent.postMessage({type:"blockedWindow",args:JSON.stringify({0:a.href})},l),!0):b(c)},k=a}return a},document.createEvent=function(){try{return arguments[0].toLowerCase().indexOf("mouse")>=0&&(new Date).getTime()-j<=50?(window.pbreason="Blocked because 'a' element was recently created and "+arguments[0]+" event was created shortly after",arguments[0]=k.href,parent.postMessage({type:"blockedWindow",args:JSON.stringify({0:k.href})},l),null):h.apply(document,arguments)}catch(a){}},document.addEventListener("fullscreenchange",function(){b(document.fullscreen)},!1),document.addEventListener("mozfullscreenchange",function(){b(document.mozFullScreen)},!1),document.addEventListener("webkitfullscreenchange",function(){b(document.webkitIsFullScreen)},!1)} inject()</script></html>